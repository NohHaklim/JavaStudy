입력을 받기 위해서는 Scanner보다 BufferedReader를 사용하는 것이 좋다.
	- BufferedReader와 BufferedWriter는 Scanner, println와 유사.
	- 데이터를 바로 전달하지 않고 버퍼를 거치기 때문에 데이터 처리 효율성이 높다. => 대규모 데이터 처리에 유리.
	- BufferedReader는 한 줄만 입력받고, 이는 무조건 String임.
	- readLine()으로 받은 데이터를 StringTokenizer로 파싱 => split보다 효율적. 왜??

여러 번 출력해야 하는 경우에는 StringBuilder를 사용해 한번에 출력하는 것이 것이 좋다.

Array를 사용하는 것보다 ArrayList를 사용하는 것이 좋다.
	ArrayList는 동적 배열
	
ArrayList를 정렬하기 위해서는 Collections.sort()를 사용한다.

배열을 초기화하기 위해서는 java.util.Arrays의 Arrays.fill(배열, 초기화값)을 사용한다.

연속으로 있는 숫자를 입력받기 위해서는 1번 대신에 2번을 사용하자 ex) 10111010101
	String[] inputs = br.readLine().split(""); 
	br.read() - '0';
	
Arrays.stream(배열).계산()
	- 자바8에서 추가된 람다를 활용할 수 있는 기술.
	- 병렬 처리 가능.
	- 생성하기 -> 맵핑 -> 필터링 1...n -> 결과 만들기 -> 결과물
	
	* 생성하기
		- 배열의 경우
		- String[] arr = new String[] { "a", "b", "c" };
		- Stream<String> stream = Arrays.stream(arr);
		- Stream<String> streamOfArrayPart = Arrays.stream(arr, 1, 3); => arr의 [1, 2]
		- 컬렉션의 경우